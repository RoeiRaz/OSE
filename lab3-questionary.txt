=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q In Exercise 4, can the function 'trap' ever return?
===   (yes/no)
no
=== Q What is the purpose of having an individual handler function for
===   each exception/interrupt? (i.e., if all exceptions/interrupts
===   were delivered to the same handler, what feature that exists in
===   the current implementation could not be provided?)
===   (free form, 1 sentence)
Individual handlers push the relevant error codes to the stack, thus allowing a specialized treatment of each exception. 
=== Q Did you have to do anything to make the user/softint program
===   behave correctly?
===   (yes/no)
no
=== Q The grade script expects it to produce a general protection
===   fault (trap 13), but softint's code says int $14. Why should
===   this produce interrupt vector 13? 
===   (free form, 1 sentence)
Users aren't privileged to create interrupt 14 (int 14 needs DPL 0); as a protection, interrupt vector 13 is generated instead.
=== Q What happens if the kernel actually allows softint's int $14
===   instruction to invoke the kernel's page fault handler (which is
===   interrupt vector 14)?
===   (free form, 1 sentence)
If users could invoke this handler, they could overwhelm the kernel with multiple interrupts, or perhaps exploit it to run their code with kernel privileges, which would be harmful. 
=== Q The break point test case will either generate a break point
===   exception or a general protection fault depending on how you
===   initialized the break point entry in the IDT (i.e., your call to
===   SETGATE from idt_init). Why? How did you need to set it in
===   order to  get the breakpoint exception to work as specified
===   above and what incorrect setup would cause it to trigger a
===   general protection fault?
===   (free form)
It depends on the privilege level we initialize the entry with; In this case, we allowed users to start a breakpoint trap, setting it with user priviliges using SETGATE(..., 3). An incorrect setup (i.e., setting the entry with DPL 0), would generate a protection fault when users use int 3.
=== Q What do you think is the point of these mechanisms, particularly
===   in light of what the user/softint test program does? 
===   (free form, 1 sentence)
They protect the system by enforcing permission; Users are allowed access only to certain, well-defined, privilleged parts of the code - like the breakpoint trap that's necessary for debugging.
=== Q In Exercise 9, what causes the page fault which panics the
===   kernel when running user/breakpoint?
===   (free form, 1 sentence)
Attempting to access protected memory (above USTACKTOP, in lib/libmain.c) without sufficient privileges (from user space).
====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
1
=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
kern/trap.c
inc/trap.h
kern/trapentry.S
=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
struct TrapEntry was defined in trap.h, containing these fields; uint8_t te_num - entry (gate) number, uint8_t te_cpl - required privilege level, and uintptr_t te_addr - address of handler. We also created a TrapEntry table in trapentry.S called trapentries. Then we added a for loop to trap_init(void), iterating over the table and calling SETGATE with the parameters of each TrapEntry.
